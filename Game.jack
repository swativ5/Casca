class Game {

    static Game instance;     // the singelton
    field boolean exit;
    field boolean start;

    field Area area;
    field int areaX, areaY;
    field int areaW, areaH;
    field int Lwall, Rwall, Uwall, Dwall;

    field Player player;

    field Ball ball1;
    field int wall1;
    field int lastWall1;
    field Ball ball2;
    field int wall2;
    field int lastWall2;
    field Ball ball3;
    field int wall3;
    field int lastWall3; 

    field int score;
    field int count;
    field int level;
    field int mode;
    field int change;
    field boolean refresh;

    /** Constructs a new game. */
    constructor Game new() {
	    do Screen.clearScreen();

        /** set the initial area size */
        let areaX = 140;
        let areaY = 60;
        let areaW = 210;
        let areaH = 120;
        let area = Area.new(areaX, areaY, areaW, areaH);

        let player = Player.new(200, 150, 10, 10);

        let Lwall = area.getLeft();
        let Rwall = area.getRight();
        let Uwall = area.getTop();
        let Dwall = area.getBottom();

        let ball1 = Ball.new(150 + Random.randRange(150), 70 + Random.randRange(60), Lwall, Rwall, Uwall, Dwall);
        do ball1.setDestination(Random.randRange(500), Random.randRange(250));
        let ball2 = Ball.new(150 + Random.randRange(150), 70 + Random.randRange(60), Lwall, Rwall, Uwall, Dwall);
        do ball2.setDestination(Random.randRange(500), Random.randRange(250));
        let ball3 = Ball.new(150 + Random.randRange(150), 70 + Random.randRange(60), Lwall, Rwall, Uwall, Dwall);
        do ball3.setDestination(Random.randRange(500), Random.randRange(250));
        let wall1 = 0;
        let lastWall1 = 0;
        let wall2 = 0;
        let lastWall2 = 0;
        let wall3 = 0;
        let lastWall3 = 0;

        let score = 0;
        let count = 0;
        let level = 1;
        let mode = 1;
        let change = 500;
        let refresh = false;

        let exit = false;
        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do area.dispose();
        do player.dispose();
        do ball1.dispose();
        do ball2.dispose();
        do ball3.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Creates an instance of game, and stores it. */
    function void newInstance() {
        let instance = Game.new();
        return;
    }
    
    /** Returns the single instance of this game. */
    function Game getInstance() {
        return instance;
    }

    method boolean run() {
        var char key;
        do menu();

        /** Normal Mode */
        if(mode = 1){
            while (~exit) {
                if(level = 2){ do ball2.show(); }
                if(level = 3){ do ball3.show(); }

                /** wait the keyboard to be pressed */
                while ((key = 0) & (~exit)) {
                    let Lwall = area.getLeft();
                    let Rwall = area.getRight();
                    let Uwall = area.getTop();
                    let Dwall = area.getBottom();

                    let key = Keyboard.keyPressed();
                    do player.move(Lwall, Rwall, Uwall, Dwall);
                    do Ballmove(Lwall, Rwall, Uwall, Dwall);

                    if (refresh) {
                        do area.show();
                        let refresh = false;
                    }
                    /** here to change the shrink rate */
                    if (count > 1) {
                        let level = level + area.shrink();
                        if(level > 3){ let level = 3; }
                        do Output.moveCursor(18,25);
                        do Output.printInt(level);
                        let count = 0;
                        let refresh = true;
                    }
                    do Sys.wait(50);
                }

                if (key = 130) { do player.setDirection(1); }
                else {
                    if (key = 131) { do player.setDirection(3); }
                    else{
                        if (key = 132) { do player.setDirection(2); }
                        else {
                            if(key = 133) { do player.setDirection(4); }
                            else{
                                if (key = 32) { let exit = true; }
                            }
                        }
                    }   
                }
                
                /** wait the keyboard to be released */
                while ((~(key = 0)) & (~exit)) {
                    let Lwall = area.getLeft();
                    let Rwall = area.getRight();
                    let Uwall = area.getTop();
                    let Dwall = area.getBottom();

                    let key = Keyboard.keyPressed();
                    do player.move(Lwall, Rwall, Uwall, Dwall);
                    do Ballmove(Lwall, Rwall, Uwall, Dwall);
                    
                    if (refresh) {
                        do area.show();
                        let refresh = false;
                    }
                    /** here to change the shrink rate */
                    if (count > 1) {
                        let level = level + area.shrink();
                        if(level > 3){ let level = 3; }
                        do Output.moveCursor(18,25);
                        do Output.printInt(level);
                        let count = 0;
                        let refresh = true;
                    }
                    do Sys.wait(50);
                }
            }
        }
        /** Mirror Mode */
        else {
            while (~exit) {
                if(level = 2){ do ball2.show(); }
                if(level = 3){ do ball3.show(); }

                /** wait the keyboard to be pressed */
                while ((key = 0) & (~exit)) {
                    let Lwall = area.getLeft();
                    let Rwall = area.getRight();
                    let Uwall = area.getTop();
                    let Dwall = area.getBottom();

                    let key = Keyboard.keyPressed();
                    do player.move(Lwall, Rwall, Uwall, Dwall);
                    do Ballmove(Lwall, Rwall, Uwall, Dwall);

                    if (refresh) {
                        do area.show();
                        let refresh = false;
                    }
                    /** here to change the shrink rate */
                    if (count > 1) {
                        let level = level + area.shrink();
                        if(level > 3){ let level = 3; }
                        do Output.moveCursor(18,25);
                        do Output.printInt(level);

                        let change = Random.randRange(500);
                        if(change < 250){
                            do Output.moveCursor(3,27);
                            do Output.printString("Mirror !!");
                            do Sys.wait(500);
                            do Output.moveCursor(3,27);
                            do Output.printString("         ");
                        }
                        else{
                            do Output.moveCursor(3,27);
                            do Output.printString("Normal !!");
                            do Sys.wait(500);
                            do Output.moveCursor(3,27);
                            do Output.printString("         ");
                        }
                        
                        let count = 0;
                        let refresh = true;
                    }
                    
                    do Sys.wait(50);
                }

                if(change < 250){
                    if (key = 130) { do player.setDirection(2); }
                    else {
                        if (key = 131) { do player.setDirection(4); }
                        else{
                            if (key = 132) { do player.setDirection(1); }
                            else {
                                if(key = 133) { do player.setDirection(3); }
                                else{
                                    if (key = 32) { let exit = true; }
                                }
                            }
                        }   
                    }
                }
                else{
                    if (key = 130) { do player.setDirection(1); }
                    else {
                        if (key = 131) { do player.setDirection(3); }
                        else{
                            if (key = 132) { do player.setDirection(2); }
                            else {
                                if(key = 133) { do player.setDirection(4); }
                                else{
                                    if (key = 32) { let exit = true; }
                                }
                            }
                        }   
                    }
                }
                
                /** wait the keyboard to be released */
                while ((~(key = 0)) & (~exit)) {
                    let Lwall = area.getLeft();
                    let Rwall = area.getRight();
                    let Uwall = area.getTop();
                    let Dwall = area.getBottom();

                    let key = Keyboard.keyPressed();
                    do player.move(Lwall, Rwall, Uwall, Dwall);
                    do Ballmove(Lwall, Rwall, Uwall, Dwall);
                    
                    if (refresh) {
                        do area.show();
                        let refresh = false;
                    }
                    /** here to change the shrink rate */
                    if (count > 1) {
                        let level = level + area.shrink();
                        if(level > 3){ let level = 3; }
                        do Output.moveCursor(18,25);
                        do Output.printInt(level);
                        let count = 0;
                        let refresh = true;
                    }
                    do Sys.wait(50);
                }
            }
        }

        if(exit){
            do Output.moveCursor(2,27);
            do Output.printString("GAME OVER");
            do Output.moveCursor(4,20);
            do Output.printString("Press Space Back To Menu");
            do Output.moveCursor(20,40);
            do Output.printString("                     ");
            do Sys.wait(500);

            let key = Keyboard.keyPressed();
            while (~(key = 32)) {
                let key = Keyboard.keyPressed();
            }
        }
        return false;
    }

    method void Ballmove(int Lwall, int Rwall, int Uwall, int Dwall) {
        var int bouncingDirection1, bouncingDirection2, bouncingDirection3;
        var int ball1Top, ball1Bottom, ball1Left, ball1Right;
        var int ball2Top, ball2Bottom, ball2Left, ball2Right;
        var int ball3Top, ball3Bottom, ball3Left, ball3Right;
        var int playerTop, playerBottom, playerLeft, playerRight;

        let wall1 = ball1.move(Lwall, Rwall-1, Uwall, Dwall-1);
        if(level > 1){ let wall2 = ball2.move(Lwall, Rwall-1, Uwall, Dwall-1); }
        if(level > 2){ let wall3 = ball3.move(Lwall, Rwall-1, Uwall, Dwall-1); }
        

        let ball1Top = ball1.getTop();
        let ball1Bottom = ball1.getBottom();
        let ball1Left = ball1.getLeft();
        let ball1Right = ball1.getRight();
        let ball2Top = ball2.getTop();
        let ball2Bottom = ball2.getBottom();
        let ball2Left = ball2.getLeft();
        let ball2Right = ball2.getRight();
        let ball3Top = ball3.getTop();
        let ball3Bottom = ball3.getBottom();
        let ball3Left = ball3.getLeft();
        let ball3Right = ball3.getRight();

        let playerTop = player.getTop();
        let playerBottom = player.getBottom();
        let playerLeft = player.getLeft();
        let playerRight = player.getRight();

        /** player touched ball */
        if(( (playerLeft-1 < ball1Right) & (playerRight+1 > ball1Left) &
            (playerTop-1 < ball1Bottom) & (playerBottom+1 > ball1Top) ) |
            ( (playerLeft-1 < ball2Right) & (playerRight+1 > ball2Left) &
            (playerTop-1 < ball2Bottom) & (playerBottom+1 > ball2Top) & (level > 1)) |
            ( (playerLeft-1 < ball3Right) & (playerRight+1 > ball3Left) &
            (playerTop-1 < ball3Bottom) & (playerBottom+1 > ball3Top) & (level > 2))){
            let exit = true;
        }

        if ((wall1 > 0) & (~(wall1 = lastWall1))) {
            let lastWall1 = wall1;
            let bouncingDirection1 = 0;

            let score = score + 1;
            do Output.moveCursor(20,25);
            do Output.printInt(score);
            let count = count + 1;

            do ball1.bounce(bouncingDirection1);
        }
        if ((level > 1) & (wall2 > 0) & (~(wall2 = lastWall2))) {
            let lastWall2 = wall2;
            let bouncingDirection2 = 0;

            let score = score + 1;
            do Output.moveCursor(20,25);
            do Output.printInt(score);

            do ball2.bounce(bouncingDirection2);
        }
        if ((level > 2) & (wall3 > 0) & (~(wall3 = lastWall3))) {
            let lastWall3 = wall3;
            let bouncingDirection3 = 0;

            let score = score + 1;
            do Output.moveCursor(20,25);
            do Output.printInt(score);

            do ball3.bounce(bouncingDirection3);
        }

        return;
    }

    method void menu(){
        var char key;

        do Sprite.Title1(5+(32*16));
        do Sprite.Title2(15+(32*86));
        do Sprite.Titlemode1(10+(32*170));
        do Sprite.Titlemode2(20+(32*170));
        do Sprite.arrow1(8+(32*176));
        do Sprite.arrow2(18+(32*176));
        do Output.moveCursor(19,20);
        do Output.printString("Normal Mode");
        do Output.moveCursor(21,23);
        do Output.printString("Press Space To Start _");
        
        while ((~start)) {
            let key = Keyboard.keyPressed();
            if(key = 130){
                do Sprite.arrow1(8+(32*176));
                do Sprite.arrow2(18+(32*176));
                do Output.moveCursor(19,40);
                do Output.printString("           ");
                do Output.moveCursor(19,20);
                do Output.printString("Normal Mode");
                let mode = 1;
            }
            else{
                if(key = 132){
                    do Sprite.arrow1(18+(32*176));
                    do Sprite.arrow2(8+(32*176));
                    do Output.moveCursor(19,20);
                    do Output.printString("           ");
                    do Output.moveCursor(19,40);
                }
                else{
                    if(key = 32){ let start = true; }
                    else{
                        if(key = 140){ do Sys.halt(); }
                    }
                }
            }
            do Sys.wait(50);
        }

        do Screen.clearScreen();
        do Output.moveCursor(10,20);
        do Output.printString("Use Arrow Key To Move");
        do Sys.wait(1000);
        do Screen.clearScreen();
        do Output.moveCursor(20,18);
        do Output.printString("Score: 0");
        do Output.moveCursor(18,18);
        do Output.printString("level: 1");
       
        do Output.moveCursor(20,40);
        do Output.printString("Press Space To Leave");
        do area.show();
        do player.show();
        do ball1.show();
        do ball2.hide();
        do ball3.hide();

        do Sys.wait(500);
        return;
    }
}